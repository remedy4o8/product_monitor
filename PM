import requests
import json
import schedule
import time
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry
from urllib.parse import urlparse
import logging

# Setup basic logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class ProductMonitor:
    def __init__(self, urls, webhook_url):
        self.urls = urls
        self.webhook_url = webhook_url
        self.previous_data = {}
        self.session = self.create_session()

    def create_session(self):
        session = requests.Session()
        retries = Retry(
            total=5,
            backoff_factor=1,
            status_forcelist=[429, 500, 502, 503, 504],
            allowed_methods=["HEAD", "GET", "OPTIONS"]  # Corrected from 'method_whitelist' to 'allowed_methods'
        )
        adapter = HTTPAdapter(max_retries=retries)
        session.mount('http://', adapter)
        session.mount('https://', adapter)
        return session

    def fetch_products_json(self, url):
        try:
            response = self.session.get(url, timeout=20)  # Increased timeout
            response.raise_for_status()
            return {product['title']: product for product in response.json().get('products', [])}
        except requests.RequestException as e:
            logging.error(f"Failed to fetch products from {url}: {str(e)}")
            return {}
        except json.JSONDecodeError:
            logging.error(f"JSON decoding failed for the data from {url}")
            return {}

    def detect_changes(self, old_data, new_data):
        added = {title: new_data[title] for title in new_data.keys() - old_data.keys()}
        removed = {title: old_data[title] for title in old_data.keys() - new_data.keys()}
        return {'added': added, 'removed': removed}

    def send_to_discord(self, message):
        parts = [message[i:i + 2000] for i in range(0, len(message), 2000)]
        for part in parts:
            data = {"content": part}
            try:
                response = self.session.post(self.webhook_url, json=data, timeout=10)
                response.raise_for_status()
            except requests.RequestException as e:
                logging.error(f"Failed to send message to Discord: {str(e)}")

    def format_message(self, change_type, title, details, domain):
        product_url = f"https://{domain}/products/{details['handle']}"
        if change_type == 'added':
            message = f"**[{title}]({product_url})**\n"
            for variant in details.get('variants', []):
                variant_id = variant.get('id')
                size = variant.get('option1')
                variant_url = f"https://{domain}/cart/{variant_id}:1"
                message += f"[{variant_id}]({variant_url}), {size}\n"
        else:
            message = f"**[{title}]({product_url})**\n"
        return message

    def monitor_products(self, url):
        domain = urlparse(url).netloc
        current_data = self.fetch_products_json(url)
        if domain in self.previous_data:
            changes = self.detect_changes(self.previous_data[domain], current_data)
            for change_type in ['added', 'removed']:
                for title, details in changes[change_type].items():
                    message = self.format_message(change_type, title, details, domain)
                    self.send_to_discord(message)
            if not changes['added'] and not changes['removed']:
                logging.info(f"No changes detected for {domain}.")
        else:
            logging.info(f"Monitoring started for {domain}, waiting for next check to detect changes.")
        self.previous_data[domain] = current_data

    def run(self):
        for url in self.urls:
            schedule.every(5). minutes.do(self.monitor_products, url)
        while True:
            schedule.run_pending()
            time.sleep(1)

# Example usage, configure URLs and webhook URL as needed
urls = ["https://littlesleepies.com/collections/vip-early-access/products.json"]
webhook_url = "https://discord.com/api/webhooks/1235253045445529670/3IQWJNQowVCLoehrgC0tOz1hgmDqwLS9jLH0AJ8gxzcMlCxdgA0xAAa5xnOK1usRdfxL"

monitor = ProductMonitor(urls, webhook_url)
monitor.run()
